package edu.neu.csye6200;

import edu.neu.csye6200.Item.AbstractFactoryAPI;
import java.util.*;

public class Cart {
	
	public List<Item> itemList = new ArrayList<Item>();
	
//	Comparator sortingByName = new Comparator() {
//		   public int compare(Item it1, Item it2) {
//			return it1.getName().compareTo(it2.getName());
//		   }
//
//		@Override
//			public int compare(Object o1, Object o2) {
//				// TODO Auto-generated method stub
//				return 0;
//			}
//		};

	
	public void showCartTotal() {
		double total = 0.0;
		for(Item it : this.itemList) {
			total = total + it.getPrice();
		}
		System.out.println("Total Price of the cart " + total);
	}
	
    public static void demo() {
        System.out.println("\n\t" + Cart.class.getName() + ".demo()...");
        
        Cart objCart = new Cart();
        System.out.println("Adding inital Items to cart : ");
        Item ik = AbstractFactoryAPI.AbstractItemFactory.getInstance();
        Item almondMilk = ik.getObject(3, "Almond Milk", 2.49);
        Item bread = ik.getObject(5, "Wheat Bread", 1.49);
        Item otemObj = ik.getObject(2, "OJ", 3.49);
        
        objCart.itemList.add(almondMilk);
        objCart.itemList.add(bread);
        objCart.itemList.add(otemObj);
        
        objCart.show();
        
        //Sort the list by item id
        System.out.println("Sorting based on Item id in ascending order");
        Collections.sort(objCart.itemList, (it1, it2) -> (it1.getId()-it2.getId()));
        objCart.show();
        // Sort the list by item name in ascending order
        System.out.println("Sorted based on Item name in ascending order");
        Collections.sort(objCart.itemList, (it1, it2) -> (it1.getName().compareTo(it2.getName())));

//        itemList.sort((Item it1, Item it2) -> it1.getName().compareTo(it2.getName()));
        objCart.show();
        // Sort the list by Price in ascending order
        System.out.println("Sorted based on Price in ascending order");
//        itemList.sort((Item it1, Item it2)-> it1.getPrice()-it2.getPrice()))); 
        Collections.sort(objCart.itemList, (it1, it2) -> ((int)it1.getPrice()-(int)it2.getPrice()));

        objCart.show();
       
        objCart.showCartTotal();
//        
        System.out.println("Removing Item from cart");
        objCart.itemList.remove(0); // Removing Almond Milk
        objCart.itemList.remove(1); // Removing Wheat Bread from ItemArraylist 
        objCart.showCartTotal();
//
        System.out.println("Addding Item Swiss Cheese to cart");
//        Item birObj = AbstractFactoryAPI.AbstractItemFactory.getInstance(6, "Swiss Cheese", 6.49);
        Item swissCheese = ik.getObject(6, "Swiss Cheese", 6.49);
        objCart.itemList.add(swissCheese);
        objCart.showCartTotal();
//        
        System.out.println("Addding Item Blue Cheese to cart");
//        Item birObj = AbstractFactoryAPI.AbstractItemFactory.getInstance(7, "Blue Cheese", 6.49);
        Item blueCheese = ik.getObject(7, "Blue Cheese", 6.49);
        objCart.showCartTotal();
        
    }
    
    public static void demo2() {
    	
        Cart objCart = new Cart();
        
        if (objCart.itemList.size() == 0) {
        	Item ik = AbstractFactoryAPI.AbstractItemFactory.getInstance();
            Item almondMilk = ik.getObject(3, "Almond Milk", 2.49);
            Item bread = ik.getObject(5, "Wheat Bread", 1.49);
            Item otemObj = ik.getObject(2, "OJ", 3.49);
            objCart.itemList.add(almondMilk);
            objCart.itemList.add(bread);
            objCart.itemList.add(otemObj);
        }
        
        System.out.println("Sorted based on Item name in ascending order");
        Collections.sort(objCart.itemList, new 	Comparator<Item>() {
        	// sort collection by element length
        	public int compare(Item o1, Item o2) {
        		return o1.getName().compareTo(o2.getName());
        	}
        });

        objCart.itemList.forEach((s)->System.out.println(s)); 
        
        System.out.println("Sorted based on Price in ascending order");
        Collections.sort(objCart.itemList, new 	Comparator<Item>() {
        	// sort collection by element length
        	public int compare(Item o1, Item o2) {
        		return Double.compare(o1.getPrice(), o2.getPrice());
        	}
        });
        
        objCart.itemList.forEach((s)->System.out.println(s)); 
        
    }
    
    public void show() {
    	for(Item itk : this.itemList) {
    		System.out.println(itk.toString());
    	}
    }
	
    
    public static void main(String args[]) {
		Cart.demo();
	}
	
}